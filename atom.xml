<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://waterjiao.github.io</id>
    <title>Waterjiao</title>
    <updated>2019-07-28T16:20:43.480Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://waterjiao.github.io"/>
    <link rel="self" href="https://waterjiao.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://waterjiao.github.io/images/avatar.png</logo>
    <icon>https://waterjiao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Waterjiao</rights>
    <entry>
        <title type="html"><![CDATA[ARTS-第三周]]></title>
        <id>https://waterjiao.github.io/post/arts</id>
        <link href="https://waterjiao.github.io/post/arts">
        </link>
        <updated>2019-07-21T09:38:08.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="arts">ARTS</h2>
<h3 id="algorithm">Algorithm</h3>
<h4 id="无重复字符的最长子串longest-substring-without-repeating-characters">无重复字符的最长子串（<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">Longest Substring Without Repeating Characters</a>）</h4>
<blockquote>
<p>无重复字符的最长子串。题目难度为 Medium</p>
</blockquote>
<p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="arts">ARTS</h2>
<h3 id="algorithm">Algorithm</h3>
<h4 id="无重复字符的最长子串longest-substring-without-repeating-characters">无重复字符的最长子串（<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">Longest Substring Without Repeating Characters</a>）</h4>
<blockquote>
<p>无重复字符的最长子串。题目难度为 Medium</p>
</blockquote>
<p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p>
<!-- more -->
<p>思路：字符串含有不同的字符，这些字符在ASCII表中占据128位，所以使用一个128位的数组来存储，例如hash['a']=3，代表a字符在遍历字符串时，前一次出现a字符的索引为3，preP为上次出现的最大索引，与当前索引做差就是最大的长度。</p>
<pre><code>class Solution{
    public int lengthOfLongestSubstring(String s) {
        int len;
        if (s == null || (len = s.length()) == 0) return 0;
        int preP = 0, max = 0;
        int[] hash = new int[128];
        for (int i = 0; i &lt; len; ++i) {
            char c = s.charAt(i);
            if (hash[c] &gt; preP) {
                preP = hash[c];
            }
            int l = i - preP + 1;
            hash[c] = i + 1;
            if (l &gt; max) max = l;
        }
        return max;
}
</code></pre>
<h3 id="review">Review</h3>
<blockquote>
<p><a href="https://www.infoq.com/articles/test-driven-design-java/?useSponsorshipSuggestions=true">Test-Driven Development: Really, It’s a Design Technique</a></p>
</blockquote>
<p>TDD 是敏捷开发中的一项核心实践和技术，也是一种设计方法论。TDD的原理是在开发功能代码之前，先编写单元测试用例代码，测试代码确定需要编写什么产品代码。TDD 是 XP（Extreme Programming）的核心实践。它的主要推动者是 Kent Beck。</p>
<p>TDD的用法：</p>
<ol>
<li>创建测试相关类，方法</li>
<li>写一个测试用例</li>
<li>Red State，不通过上一步所写的测试用例</li>
<li>Green State，改动代码使其通过测试用例</li>
<li>Refactoring state，重构，消除重复的，不用的，优化设计结构，也称为Bule State</li>
</ol>
<p>TDD的优势：</p>
<ol>
<li>更好的软件</li>
<li>避免冗余</li>
<li>新的特性</li>
<li>有文档</li>
</ol>
<h3 id="tip">Tip</h3>
<h4 id="python中的列表">Python中的列表</h4>
<ol>
<li>列表适合存储相关对象的集合，有大量类似的对象，要将它们作为一个整体，用列表比较合适</li>
<li>python中的列表与其他语言的数组相类似，不过是动态的用起来很easy</li>
<li>在代码中，对象列表用中括号包围，列表对象用逗号分隔</li>
<li>python中的in可以检查成员关系</li>
<li>在运行时扩展列表，append（常用）、extend（用于动态扩展）和insert（插入）</li>
<li>在运行时收缩列表，remove和pop，remove只能remove列表对象，pop根据列表对象所处位置来pop</li>
<li>列表copy时的陷阱，看一下代码吧</li>
<li>其实用列表最舒服的应该是切片，不光在列表中也可以在字符串中</li>
</ol>
<pre><code class="language-python">a = [1,2,3,4]
b = a
print(b)
# [1,2,3,4]
b.append(5)
print(b)
# [1,2,3,4,5]
print(a)
# [1,2,3,4,5]
</code></pre>
<p>我们发现在给b列表增加5时，a也增加了5，这是为什么呢？这是因为a和b都指向了同一个数据，如果修改列表，则另一个也会改变。
如果想要仅仅只是复制，则用copy和deepcopy，区别的话，占个坑，之后再说。
现在举一个切片的栗子，我觉得比较厉害的</p>
<pre><code class="language-python">a = [1,2,3]
print(a[::-1])
# [3,2,1]
</code></pre>
<p>可能也不是很厉害，记住一点就是与其他语言不同的是，python允许从任意两端索引，使用-1会选择列表中的最后一项，-2会选择倒数第2个对象，以此类推。</p>
<h3 id="share">Share</h3>
<p>分享一篇关于如何学习Java并发编程<a href="https://www.infoq.cn/article/1ggzj_oFl8wuJFwVG9et">简明高效的 Java 并发编程学习指南</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fitness]]></title>
        <id>https://waterjiao.github.io/post/fitness</id>
        <link href="https://waterjiao.github.io/post/fitness">
        </link>
        <updated>2019-07-16T14:11:33.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>7月，强身健体</p>
</blockquote>
<table>
<thead>
<tr>
<th>星期日</th>
<th>星期一</th>
<th>星期二</th>
<th>星期三</th>
<th>星期四</th>
<th>星期五</th>
<th>星期六</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
</tr>
<tr>
<td>7</td>
<td>8</td>
<td>9</td>
<td>10</td>
<td>11</td>
<td>12</td>
<td>13</td>
</tr>
<tr>
<td>14</td>
<td>15</td>
<td>16(蒸脚）</td>
<td>17(俯卧撑)</td>
<td>18(Keep胸)</td>
<td>19(无训练)</td>
<td>20(无训练)</td>
</tr>
<tr>
<td>21(胸，肩)</td>
<td>22(无训练)</td>
<td>23(无训练)</td>
<td>24(无训练)</td>
<td>25(俯卧撑)</td>
<td>26(无训练)</td>
<td>27(俯卧撑)</td>
</tr>
<tr>
<td>28(无训练)</td>
<td>29</td>
<td>30</td>
<td>31</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ARTS-第二周]]></title>
        <id>https://waterjiao.github.io/post/arts-di-er-zhou</id>
        <link href="https://waterjiao.github.io/post/arts-di-er-zhou">
        </link>
        <updated>2019-07-01T14:06:40.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="arts">ARTS</h2>
<h3 id="algorithm">Algorithm</h3>
<h4 id="两数之和two-sum">两数之和（Two Sum）</h4>
<blockquote>
<p>两数相加。题目难度为 Medium</p>
</blockquote>
<p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="arts">ARTS</h2>
<h3 id="algorithm">Algorithm</h3>
<h4 id="两数之和two-sum">两数之和（Two Sum）</h4>
<blockquote>
<p>两数相加。题目难度为 Medium</p>
</blockquote>
<p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p>
<!-- more -->
<p>思路：用单链表的方式实现两数相加，需要考虑的就是每一位相加后是否需要进位。新建一条单链表用于存储每个位数相加后的余数（模10），进位数参与到下一位的加法中，最后再做一次进位判断，返回结果单链表。</p>
<pre><code>/*
class ListNode{
    int val;
		ListNode next;
		ListNode(int x){
		    val = x;
		}
}
*/
class AddTwoNums {
    public ListNode addTwoNums( ListNode l1, ListNode l2){
		    ListNode node = new ListNode(0);
				ListNode n1=l1, n2=l2, t=node;
				int sum = 0;
				while(n1!=null || n2!=null){
				    sum /= 10;
						if(n1!=null){
						    sum += n1.val;
								n1 = n1.next;
						}
						if(n2!=null){
						    sum += n2.val;
								n2 = n2.next;
						}
						t.next = new ListNode(sum%10);
						t = t.next
				}
				if(sum/10 != 0) t = new ListNode(1);
				
				return node.next;
		}
}
</code></pre>
<h3 id="review">Review</h3>
<blockquote>
<p><a href="https://www.infoq.com/articles/java-10-var-type/?useSponsorshipSuggestions=true">Explore the New Java 10 “var” Type: An Introduction and Hands-on Tutorial</a></p>
</blockquote>
<p>在Java 10以及之后，在声明局部变量类型的时候可以使用var来告知编译器进行类型推断，取代之前的类名或接口名。在变量初始化的阶段，就像 var s = “”;
此外，for循环中的索引变量类型也可以使用var。它由编译器推断类型，然后将推断出的类型写入字节码中，也就是说它对运行时并没有任何影响，仅仅是一个语法糖，Java仍然是一种静态语言。
除了局部变量之外，另外在属性和方法返回值类型中，不能使用var。 这样做是为了避免引起一些无法预知的错误，使用的时候尽量使需要推断的变量靠近它声明的地方，从而缓解可读性问题。
同时，还介绍了下JShell，从Java9之后，java开始引入了类似于python的交互式 REPL（Read-Eval-Print Loop，读取-求值-输出 循环）工具。windows，linux，macos直接在终端内，输入jshell即可。</p>
<h3 id="tip">Tip</h3>
<h4 id="python中参数传递时是按值传递呢还是按引用传递">Python中参数传递时，是按值传递呢，还是按引用传递？</h4>
<p>首先先来看一段代码</p>
<pre><code class="language-python">def double(arg):
    print('Before: ',arg)
    arg = arg*2
    print('After: ',arg)
</code></pre>
<p>当传递一个数值时</p>
<pre><code class="language-python">num = 2
double(num)
print(num)
#输出还是2
line = [1,2]
double(line)
print(line)
#输出还是[1,2]
</code></pre>
<p>当在函数中稍稍做一点变化时</p>
<pre><code class="language-python">def double(arg):
    print('Before: ',arg)
    arg = arg.append('More data')
    print('After: ',arg)
</code></pre>
<p>再次调用double函数时</p>
<pre><code class="language-python">line = [1,2]
double(line)
print(line)
#输出[1,2,'More data']
</code></pre>
<p>奇怪的事情发生了，是不是？
其实，根据实际情况，Python的函数参数语义既支持按值调用也支持按引用调用。
Python中的变量是对象引用。可以把变量中存储的值认为是值的内存地址，而不是它真正的值。Python函数支持的调用语义可以更准确地称为按对象引用调用语义。
解释器会查看对象引用指示的值的类型，如果变量是可变的（列表、字典和集合），就会应用按引用调用；如果变量是不可变的（字符串、整数和元组），就会按值传入函数。</p>
<h3 id="share">Share</h3>
<p>分享一篇关于注解的吧，作者将注解比作标签，可以很好得解释一下注解<a href="https://blog.csdn.net/shengzhu1/article/details/81271409">Java注解深入浅出</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[书单]]></title>
        <id>https://waterjiao.github.io/post/shu-dan</id>
        <link href="https://waterjiao.github.io/post/shu-dan">
        </link>
        <updated>2019-06-30T15:45:03.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>不知不觉就七月了，记录下看得书，争取每读完一本，输出一篇心得体会</p>
</blockquote>
<h3 id="技术"><strong>技术</strong></h3>
<p>《码出高效 Java开发手册》
《Spring Boot实战》
《Java编程逻辑》
《Head First 设计模式》</p>
<h3 id="推理"><strong>推理</strong></h3>
<p>《暗黑者四部曲》</p>
<h3 id="文学"><strong>文学</strong></h3>
<p>《荣宝斋》</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ARTS-第一周]]></title>
        <id>https://waterjiao.github.io/post/arts-di-yi-zhou</id>
        <link href="https://waterjiao.github.io/post/arts-di-yi-zhou">
        </link>
        <updated>2019-06-23T16:19:46.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="arts">ARTS</h2>
<h3 id="algorithm">Algorithm</h3>
<h4 id="两数之和two-sum">两数之和（Two Sum）</h4>
<blockquote>
<p>两数之和，题目难度为 Easy</p>
</blockquote>
<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="arts">ARTS</h2>
<h3 id="algorithm">Algorithm</h3>
<h4 id="两数之和two-sum">两数之和（Two Sum）</h4>
<blockquote>
<p>两数之和，题目难度为 Easy</p>
</blockquote>
<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>
<!-- more -->
<p>思路：直接暴力求出，待后续优化</p>
<pre><code>class TwoSum {
    public int[] twoSum(int[] nums, int target) {
        for (int i = 0; i &lt; nums.length; ++i) {
            for (int j = i + 1; j &lt; nums.length; ++j) {
                if (nums[i] + nums[j] == target) {
                    return new int[]{i, j};
                }
            }
        }
        return null;
    }
}
</code></pre>
<h3 id="review">Review</h3>
<blockquote>
<p>暂无，待补上</p>
</blockquote>
<h3 id="tip">Tip</h3>
<h4 id="python模块安装到site-packages">Python模块安装到Site-packages</h4>
<p>使用“setuptools”将模块安装到site-packages</p>
<ol>
<li>创建一个发布描述</li>
<li>生成一个发布文件</li>
<li>安装发布文件
例如：下面我编写一个helloworld.py，就是helloworld，但是我又想在其他py文件中使用它，第一种方法：在同一目录下，直接import helloworld，第二种方法，放在解释器的site-package位置，第三种方法，放在标准库（当然不会），其实第一种还有就是from 不同目录 import helloworld</li>
</ol>
<pre><code class="language-python">def helloworld(name:str) -&gt; str:
    return name+' said: helloworld'
</code></pre>
<p>按照第二种方法，模块安装到Site-package</p>
<ol>
<li>创建发布描述，要创建两个文件，这两个文件放在与helloworld.py文件的同一个文件夹中，第一个文件必须命名为setup.py</li>
<li>另一个文件命名为README.txt
下面来看一下setup.py中的内容</li>
</ol>
<pre><code class="language-python">from setuptools import setup
setup(
    name='helloworld',
    version='1.0',
    description='Someone say hello',
    author='waterjiao',
    author_email='78567xxxx@qq.com',
    url='',
    py_modules=['helloworld'],
    )
</code></pre>
<p>之后输入命令：python3 setup.py sdist
sdist作为一个参数
形成helloworld-1.0.tar.gz
最后完成第三步，发布
python3 -m pip install helloworld-1.0.tar.gz</p>
<h3 id="share">Share</h3>
<p>分享一篇关于SDN的吧，作者李呈，对于想了解OpenFlow协议的可以看看，<a href="https://www.sdnlab.com/1479.html">OpenFlow通信流程解读</a></p>
]]></content>
    </entry>
</feed>