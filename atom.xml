<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://waterjiao.github.io</id>
    <title>Waterjiao</title>
    <updated>2021-01-31T02:10:57.978Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://waterjiao.github.io"/>
    <link rel="self" href="https://waterjiao.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://waterjiao.github.io/images/avatar.png</logo>
    <icon>https://waterjiao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Waterjiao</rights>
    <entry>
        <title type="html"><![CDATA[2020总结，2021计划]]></title>
        <id>https://waterjiao.github.io/post/2020-zong-jie-2021-ji-hua/</id>
        <link href="https://waterjiao.github.io/post/2020-zong-jie-2021-ji-hua/">
        </link>
        <updated>2021-01-31T01:50:25.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="2020总结">2020总结</h1>
<blockquote>
<p>2020，新冠肺炎肆虐了一整年，我也完成了人生中的一件大事，平安，幸福</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h1 id="2020总结">2020总结</h1>
<blockquote>
<p>2020，新冠肺炎肆虐了一整年，我也完成了人生中的一件大事，平安，幸福</p>
</blockquote>
<!-- more -->
<p>2020年的计划很多都没有完成。。。希望2021年能够坚持，或者说是自律，要有一个明确的目标和规划，不仅仅是生活和工作，对未来也要有一个短期和长期的打算。</p>
<p>2020年，换了组，做了不一样的工作，学习到了很多，算是找到了一条可能适合我的路，也做了一些事情，可自我感觉并不是那么完美。代码写了不少，却少有重构，时间较为紧张，自我约束还不够，希望在之后的工作中能够加强。</p>
<p>2020年，幸福。</p>
<p>待续。。。</p>
<h1 id="2021计划">2021计划</h1>
<blockquote>
<p>每年都会给自己一个计划，完后年终一看，一项没完成，现在1月都已经是尾声了，再列一个计划吧</p>
</blockquote>
<ol>
<li>学习基础知识（网络，计算机组成，操作系统，数据结构和算法）</li>
<li>学习软件技能（设计模式，重构，整洁代码，DDD）</li>
<li>学习业内知识（k8s，容器网络）</li>
<li>健身</li>
<li>理财</li>
</ol>
<p>待续。。。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ARTS-第十六周]]></title>
        <id>https://waterjiao.github.io/post/arts-di-shi-liu-zhou/</id>
        <link href="https://waterjiao.github.io/post/arts-di-shi-liu-zhou/">
        </link>
        <updated>2020-02-15T05:55:31.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="arts">ARTS</h2>
<h3 id="algorithm">Algorithm</h3>
<h4 id="只出现一次的数字只出现一次的数字">只出现一次的数字（<a href="https://leetcode-cn.com/problems/single-number/">只出现一次的数字</a>）</h4>
<blockquote>
<p>只出现一次的数字。题目难度为 Easy</p>
</blockquote>
<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<p><strong>示例1</strong></p>
<pre><code>输入: [2,2,1]
输出: 1

输入: [4,1,2,1,2]
输出: 4
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h2 id="arts">ARTS</h2>
<h3 id="algorithm">Algorithm</h3>
<h4 id="只出现一次的数字只出现一次的数字">只出现一次的数字（<a href="https://leetcode-cn.com/problems/single-number/">只出现一次的数字</a>）</h4>
<blockquote>
<p>只出现一次的数字。题目难度为 Easy</p>
</blockquote>
<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<p><strong>示例1</strong></p>
<pre><code>输入: [2,2,1]
输出: 1

输入: [4,1,2,1,2]
输出: 4
</code></pre>
<!-- more -->
<p>思路1：将数组排序，每隔两个进行遍历，找出不一样的数字即可</p>
<pre><code class="language-go">import &quot;sort&quot;
func singleNumber(nums []int) int {
    sort.Ints(nums)
    var a = nums[0]
    for i:=0;i&lt;len(nums)-1;i+=2{
        if nums[i] != nums[i+1]{
            a = nums[i]
            return a
        }
    }
    if len(nums)%2 != 0 {
        b := len(nums)
        a = nums[b-1]
    }
    return a
}
</code></pre>
<h3 id="review">Review</h3>
<blockquote>
<p>go</p>
</blockquote>
<p><a href="https://www.freecodecamp.org/news/learning-go-from-zero-to-hero-d2a3223b3d86/">Learning go from zero to hero</a><br>
从Packages开始：<br>
Go的代码都写在Package中，main包是整个程序执行的关键，在Go中有很多内建的包。最常使用的就是fmt包。</p>
<h4 id="installing-a-package">Installing a package</h4>
<pre><code>go get &lt;package-url-github&gt;
// example
go get github.com/satori/go.uuid
</code></pre>
<p>要安装的包要放在在工作目录的GOPATH中，安装好的包在GPOPATH/pkg中。</p>
<h4 id="panic">Panic</h4>
<p>Panic is something that is unhandled and is suddenly encountered during a program execution.<br>
例如当多线程对一个map进行读写时，会引起panic。当发生panic时，程序将会被挂起，能在panic后执行的只有defer。</p>
<pre><code>//Go
package main

import &quot;fmt&quot;

func main() {
    f()
    fmt.Println(&quot;Returned normally from f.&quot;)
}

func f() {
    defer func() {
        if r := recover(); r != nil {
            fmt.Println(&quot;Recovered in f&quot;, r)
        }
    }()
    fmt.Println(&quot;Calling g.&quot;)
    g(0)
    fmt.Println(&quot;Returned normally from g.&quot;)
}

func g(i int) {
    if i &gt; 3 {
        fmt.Println(&quot;Panicking!&quot;)
        panic(fmt.Sprintf(&quot;%v&quot;, i))
    }
    defer fmt.Println(&quot;Defer in g&quot;, i)
    fmt.Println(&quot;Printing in g&quot;, i)
    g(i + 1)
}
</code></pre>
<h4 id="defer">Defer</h4>
<p>Defer is something that will always get executed at the end of a function.<br>
Defer的作用在于，当我们想在方法结束之前执行一些动作，可以用defer，例如：关闭一个文件。</p>
<h3 id="tip">Tip</h3>
<h4 id="ipv6">IPv6</h4>
<blockquote>
<p>本周主要是网络IPv6和UML的学习<br>
Don’t communicate by sharing memory; share memory by communicating.</p>
</blockquote>
<ol>
<li></li>
</ol>
<h3 id="share">Share</h3>
<blockquote>
<p>go语言并发</p>
</blockquote>
<p>《Go语言实战》读书笔记，直接看飞雪无情的博客<a href="https://www.flysnow.org/2017/04/29/go-in-action-go-runner.html">Go并发示例</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[打卡]]></title>
        <id>https://waterjiao.github.io/post/da-qia/</id>
        <link href="https://waterjiao.github.io/post/da-qia/">
        </link>
        <updated>2020-02-13T14:07:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="21天打卡计划">21天打卡计划</h1>
<p>Day1<br>
学习课程：《趣谈网络协议》第13讲<br>
打卡笔记：<br>
在网络层，Socket 函数需要指定是 IPv4 还是 IPv6， AF_INET 和 AF_INET6。还要指定是 TCP 还是 UDP，为 SOCK_STREAM 和 SOCK_DGRAM。<br>
对于TCP，服务端要先调用bind函数，给这个Socket赋值IP和Port，再调用listen函数进行监听。客户端用过connect函数发起连接，经过三次握手，这里注意，一旦握手成功，服务端的accept函数会返回另一个Socket，监听Socket和已连接Socket。<br>
对于UDP，没有三次握手，服务端调用bind和listen，由于不需要维护连接状态，只要有一个Socket就可以和多个客户端通信，客户端和服务端都调用sendto和recvfrom。<br>
服务端维护多个Socket连接的方法：<br>
1）多进程<br>
2）多线程<br>
3）IO多路复用，一个线程维护多个Socket<br>
4）IO多路复用，epoll<br>
文件描述符（file descriptor）是内核为了高效管理已被打开的文件所创建的索引，其是一个非负整数（通常是小整数），用于指代被打开的文件，所有执行I/O操作的系统调用都通过文件描述符。</p>
<h1 id="21天打卡计划-2">21天打卡计划</h1>
<p>Day2<br>
学习课程：《趣谈网络协议》第14讲<br>
打卡笔记：<br>
1.应用层 http协议，简单例子，访问网页时，首先根据url通过DNS转化为IP地址，传输层为TCP协议，经过三次握手 进行连接，四次挥手 断开连接，中间过程，IP层，数据链路层，物理层，经过ARP查找MAC地址，发送到目标。而QUIC基于 UDP连接，不需要三次握手，节省资源，提高了性能和效率;<br>
2.http报文包括 请求行 、首部、正文实体，请求行包含方法、SP、URL、版本，首部包含首部字段名、SP、字段值、cr/if。实体就是正文实体。其中，方法就是GET、POST、PUT和DELETE方法。<br>
3.http1.1发送请求时串行，http2.0发送请求时并行，http2.0可以通过头压缩、分帧、二进制编码、多路复用来提升传输效率。<br>
4.Quic 全称 quick udp internet connection ，“快速 UDP 互联网连接”，（和英文 quick 谐音，简称“快”）是由 google 提出的使用 udp 进行多路并发传输的协议。<br>
1）自定义连接机制，不基于四元组，基于随机ID<br>
2）自定义重传机制<br>
3）无阻塞多路复用<br>
4）自定义流量控制。</p>
<h1 id="21天打卡计划-3">21天打卡计划</h1>
<p>Day3<br>
学习课程：《趣谈网络协议》第15讲<br>
打卡笔记：<br>
公钥和私钥是成对的，它们互相解密。公钥加密，私钥解密。私钥数字签名，公钥验证。<br>
http协议不安全，在安全要求下，一般使用https协议，加密的方法有两种对称和不对称。https协议中首先数字证书保证了服务端公钥的可靠性，客户端从CA库里查询确认可靠性，就用证书中公钥去加密pre-master，服务端收到加密后的数据，用自己的私钥去解开，得到pre-master，然后两边都有了①客户端的随机数 ②服务端的随机数 ③pre-master 然后就各自通过计算得到一样的值，就当做公钥。后面就是对称加密的数据传输。这个过程中，对称加密的公钥从来没有在网络上传输过，就很安全了。ca证书中的解密是通过不对称的加密方式实现的，而且保证了公钥的可靠性，所以这里不怕别人拿到公钥，因为私钥他没有，也不怕别人伪造私钥和公钥，因为ca保证了公钥是可靠的。</p>
<h1 id="21天打卡计划-4">21天打卡计划</h1>
<p>Day4<br>
学习课程：《趣谈网络协议》第16讲<br>
打卡笔记：<br>
直播过程：主播端采样+编码+推流至服务端，服务端接流+流处理+分发至分发网络，观众从分发网络拉流+解码+播发。<br>
视频是图片的序列，因此分为三种帧，I帧，P帧，B帧。每一帧又分成多个片，每个片分成多个宏块，压成二进制流为网络提取层单元NALU，NALU之间通过特殊的起始标识符分隔，在每个I帧前要插入单独保存SPS和PPS的NALU，形成NALU序列。<br>
推流使用RTMP协议，基于TCP，主要是确定版本号和时间戳，在传输数据时，需要创建一个流Stream，通过这个Stream来推流publish。推送到流媒体集群的视频流经过转码和分发，可以被客户端通过 RTMP 协议拉取，然后组合为 NALU，解码成视频格式进行播放。这样就可以看直播了。</p>
<h1 id="21天打卡计划-5">21天打卡计划</h1>
<p>Day5<br>
学习课程：《趣谈网络协议》第17讲<br>
打卡笔记：<br>
对于FTP服务器而言，FTP 有两种工作模式，分别是主动模式（PORT）和被动模式（PASV）。两种都是通过21端口进行连接，再开放20或大于1024的端口来进行数据传输。<br>
P2P就是利用tracker中心服务器来记录每个下载者的信息，大家又利用记录了tarcker服务器地址的种子.torrent文件来进行下载，其中还记录了各个下载块。<br>
DHT（Distributed Hash Table）去中心化网络，使用Kademlia 协议，就是每个加入到DHT网络中的节点都要负责存储部分资源信息和成员联系信息。利用哈希值来计算。DHT节点信息划分是通过按位数进行维护，节点信息维护是通过维护列表进行。Kademlia算法中，每个节点只有4个指令，分别是PING、STORE、FIND_NODE和FIND_VALUE。</p>
<h1 id="21天打卡计划-6">21天打卡计划</h1>
<p>Day6<br>
学习课程：《趣谈网络协议》第18讲<br>
打卡笔记：<br>
DNS的作用就是将网站名称转化为IP地址，DNS服务器又根DNS服务器，顶级域DNS服务器和权威DNS服务器。<br>
DNS的解析流程：客户端问www.baidu.com的IP是什么，本地域名服务器进行查询，没有就咨询根域名服务器，根域名服务器回复说去咨询.com顶级域名服务器，顶级域名服务器又说去咨询www.baidu.com的权威DNS服务器吧，本地DNS就去问权威DNS服务器，权威DNS服务器将IP地址返回，客户端与目标建立连接。<br>
DNS的另外一个功能，就是负载均衡。在域名和 IP 的映射过程中，给了应用基于域名做负载均衡的机会，可以是简单的负载均衡，也可以根据地址和运营商做全局的负载均衡。</p>
<h1 id="21天打卡计划-7">21天打卡计划</h1>
<p>Day7<br>
学习课程：《趣谈网络协议》第19讲<br>
打卡笔记：<br>
传统DNS<br>
1）域名缓存问题，在一次请求后会在本地缓存，没有及时更新导致问题出现<br>
2）域名转发问题，由于运营商DNS服务器将其转发，导致跨运营商访问问题出现<br>
3）出口NAT问题，从NAT口出来的IP无法判断，导致跨运营商访问问题出现<br>
4）域名更新问题，和1）关联性比较大<br>
5）解析延迟问题，本地DNS，根DNS，顶级DNS，权威DNS，有延时<br>
HTTPDNS<br>
不走传统的 DNS 解析，而是自己搭建基于 HTTP 协议的 DNS 服务器集群，分布在多个地点和多个运营商。当客户端需要 DNS 解析的时候，通过 SDK 使用 HTTP 协议进行请求这个服务器集群，得到就近的地址。</p>
<h1 id="21天打卡计划-8">21天打卡计划</h1>
<p>Day8<br>
学习课程：《趣谈网络协议》第20讲<br>
打卡笔记：<br>
CDN 的全称是 Content Delivery Network，即内容分发网络。<br>
CDN的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求。<br>
CDN 和电商系统的分布式仓储系统一样，分为中心节点、区域节点、边缘节点，而数据缓存在离用户最近的位置。<br>
CDN 最擅长的是缓存静态数据，除此之外还可以缓存流媒体数据，这时候要注意使用防盗链。它也支持动态数据的缓存，一种是边缘计算的生鲜超市模式，另一种是链路优化的冷链运输模式。</p>
<h1 id="21天打卡计划-9">21天打卡计划</h1>
<p>Day9<br>
学习课程：《趣谈网络协议》第21讲<br>
打卡笔记：<br>
数据中心指用于安置计算机系统及相关部件的设施，例如电信和储存系统。一般它包含冗余和备用电源，冗余数据通信连接，环境控制和各种安全设备。<br>
数据中心分为三层。服务器连接到接入层，然后是汇聚层，再然后是核心层，最外面是边界路由器和安全设备。<br>
数据中心的所有链路都需要高可用性。服务器需要绑定网卡，交换机需要堆叠，三层设备可以通过等价路由，二层设备可以通过 TRILL 协议。<br>
随着云和大数据的发展，东西流量相对于南北流量越来越重要，因而演化为叶脊网络结构。<br>
大二层是指二层互联从汇聚层上升核心层，全部在一个广播域内。</p>
<h1 id="21天打卡计划-10">21天打卡计划</h1>
<p>Day10<br>
学习课程：《趣谈网络协议》第22讲<br>
打卡笔记：<br>
VPN（ Virtual Private Network）虚拟专用网，就是利用开放的公众网络，建立专用数据传输通道，将远程的分支机构、移动办公人员等连接起来。VPN 通过隧道技术在公众网络上仿真一条点到点的专线，是通过利用一种协议来传输另外一种协议的技术，这里面涉及三种协议：乘客协议、隧道协议和承载协议。完全基于软件的 IPsec VPN 可以保证私密性、完整性、真实性、简单便宜，但是性能稍微差一些；MPLS-VPN 综合和 IP 转发模式和 ATM 的标签转发模式的优势，性能较好，但是需要从运营商购买。</p>
<h1 id="21天打卡计划-11">21天打卡计划</h1>
<p>Day11<br>
学习课程：《Go语言核心36讲》第15讲<br>
打卡笔记：<br>
Go语言中以下值是不可寻址的：</p>
<ul>
<li>常量的值 // const num = 123  _ = &amp;num</li>
<li>基本类型值的字面量 // _ = &amp;(123)</li>
<li>对各种字面量的索引表达式和切片表达式的结果值</li>
<li>对字符串变量的索引表达式和切片表达式的结果值</li>
<li>对字典变量的索引表达式的结果值</li>
<li>函数字面量和方法字面量，以及对它们的调用表达式的结果值</li>
<li>结构体字面量的字段值</li>
<li>类型转换表达式的结果值</li>
<li>类型断言表达式的结果值</li>
<li>接收表达式的结果值</li>
</ul>
<h1 id="21天打卡计划-12">21天打卡计划</h1>
<p>Day12<br>
学习课程：《趣谈网络协议》第23讲<br>
打卡笔记：<br>
手机上网过程：<br>
1）手机开机后，寻找周围的eNodeB基站，然后发送Attach Request<br>
2）eNodeB将请求发送给MME<br>
3）MME去请求手机，认证和鉴权<br>
4）当MME通过了手机的认证，分配隧道，和SGW创建session，分配隧道t1，告诉SGW给MME分配一个隧道口<br>
5）SGW 转头向 PGW 请求建立一个会话，为 PGW 的控制面分配一个隧道 ID t2，也给 PGW 的数据面分配一个隧道 ID t3，并且请求 PGW 给自己的控制面和数据面分配隧道 ID<br>
6）PGW 回复 SGW ，使用自己的控制面隧道 ID t2，回复里面携带着给 SGW 控制面分配的隧道 ID t4 和控制面的隧道 ID t5，隧道建设完成。双方请求对方，都要带着对方给自己分配的隧道 ID，从而标志是这个手机的请求。<br>
7）接下来 SGW 回复 MME 说“创建会话成功”，使用自己的隧道 ID t1 访问 MME，回复里面有给 MME 分配隧道 ID t6，也有 SGW 给 eNodeB 分配的隧道 ID t7。<br>
8）当 MME 发现后面的隧道都建设成功之后，就告诉 eNodeB，“后面的隧道已经建设完毕，SGW 给你分配的隧道 ID 是 t7，你可以开始连上来了，但是你也要给 SGW 分配一个隧道 ID”。<br>
9）eNodeB 告诉 MME 自己给 SGW 分配一个隧道，ID 为 t8。<br>
10）MME 将 eNodeB 给 SGW 分配的隧道 ID t8 告知 SGW，从而前面的隧道也建设完毕。<br>
手机可以上网了。</p>
<h1 id="21天打卡计划-13">21天打卡计划</h1>
<p>Day13<br>
学习课程：《深入剖析Kubernetes》第13讲<br>
打卡笔记：<br>
Namespace 做隔离，Cgroups 做限制，rootfs 做文件系统。<br>
Pod 里的所有容器，共享的是同一个 Network Namespace，并且可以声明共享同一个 Volume。<br>
查看容器在宿主机的Namespace文件，在。。。<br>
为 Kubernetes 开发一个网络插件时，应该重点考虑的是如何配置这个 Pod 的 Network Namespace，而不是每一个用户容器如何使用你的网络配置。<br>
“组合”操作，正是容器设计模式里最常用的一种模式，它的名字叫：sidecar。<br>
yaml文件中Init Contaniner定义的容器在spec.containers定义的用户容器先启动。<br>
Pod，实际上是在扮演传统基础设施里“虚拟机”的角色；而容器，则是这个虚拟机里运行的用户程序。</p>
<h1 id="21天打卡计划-14">21天打卡计划</h1>
<p>Day18<br>
学习课程：《趣谈网络协议》第26讲<br>
打卡笔记：<br>
对于公有云上的虚拟机，仅仅开放需要的端口，将其他的端口一概关闭，只要通过安全措施守护好这个唯一的入口就可以了。采用的方式常常是用 ACL（Access Control List，访问控制列表）来控制 IP 和端口。<br>
PREROUTING - 路由判断 - FORWARD - OUTPIUT - POSTROUTING<br>
｜                           ｜<br>
INPUT                      路由判断<br>
｜                           ｜<br>
上层协议栈</p>
<p>PREROUTING，INPUT，FORWARD，OUTPIUT，POSTROUTING对应的5个节点<br>
iptables 的表分为四种：raw–&gt;mangle–&gt;nat–&gt;filter。<br>
mangle 表主要是修改数据包，包含：PREROUTING，INPUT，FORWARD，OUTPIUT，POSTROUTING链。<br>
Netfilter 的连接跟踪（conntrack）功能，用于识别nat转换。<br>
源地址转换 (Snat)：iptables -t nat -A -s 私网 IP -j Snat --to-source 外网 IP<br>
目的地址转换 (Dnat)：iptables -t nat -A -PREROUTING -d 外网 IP -j Dnat --to-destination 私网 IP</p>
<h1 id="21天打卡计划-15">21天打卡计划</h1>
<p>Day19<br>
学习课程：《趣谈网络协议》第27讲<br>
打卡笔记：<br>
在 Linux 下，可以通过 TC 控制网络的 QoS，主要就是通过队列的方式。<br>
云中的流量控制主要通过队列进行的，队列分为两大类：无类别队列规则和基于类别的队列规则。<br>
无类别排队规则有pfifo_fast，这是一种不把网络包分类的技术；随机公平队列（Stochastic Fair Queuing）；令牌桶规则（TBF，Token Bucket Filte）。<br>
在云中网络 Openvswitch 中，主要使用的是分层令牌桶规则（HTB），将总的带宽在一棵树上按照配置的比例进行分配，并且在一个分支不用的时候，可以借给另外的分支，从而增强带宽利用率。</p>
<h1 id="21天打卡计划-16">21天打卡计划</h1>
<p>Day20<br>
学习课程：《趣谈网络协议》第28讲<br>
打卡笔记：<br>
要对不同用户的网络进行隔离，解决 VLAN 数目有限的问题，需要通过 Overlay 的方式，常用的有 GRE 和 VXLAN。<br>
GRE 是一种点对点的隧道模式，VXLAN 支持组播的隧道模式，它们都要在某个 Tunnel Endpoint 进行封装和解封装，来实现跨物理机的互通。<br>
OpenvSwitch 可以作为 Tunnel Endpoint，通过设置流表的规则，将虚拟机网络和物理机网络进行隔离、转换。<br>
ovs基本命令：<br>
ovs-vsctl add-br br0<br>
ovs-vsctl add-port br0 eth0<br>
ovs-vsctl add-bond br0 port0 eth2 eht3<br>
ovs-vsctl del-port br0 eth0<br>
ovs-vsctl del-port br0 br0 //会报错<br>
ovs-vsctl del-port br0 port0<br>
删除bridge ovs-vsctl bel-br br0<br>
查看bridge ovs-ofctl show br0<br>
查看流表项 ovs-ofctl dump-flows br0</p>
<h1 id="21天打卡计划-17">21天打卡计划</h1>
<p>Day21<br>
学习课程：《趣谈网络协议》第29讲<br>
打卡笔记：<br>
容器是一种比虚拟机更加轻量级的隔离方式，主要通过 namespace 和 cgroup 技术进行资源的隔离，namespace 用于负责看起来隔离，cgroup 用于负责用起来隔离。<br>
增加routerns的命名空间 ip netns add routerns<br>
转发开关打开 ip netns exec routerns sysctl -w net.ipv4.ip_forward=1<br>
创建网卡连接在br0的网桥上 ovs-vsctl -- add-port br0 taprouter -- set Interface taprouter type=internal -- set Interface taprouter external-ids:iface-status=active -- set Interface taprouter external-ids:attached-mac=fa:16:3e:84:6e:cc<br>
容器网络连接到物理网络的方式和虚拟机很像，通过桥接的方式实现一台物理机上的容器进行相互访问，如果要访问外网，最简单的方式还是通过 NAT。<br>
和虚拟机一样，不同物理机上的容器需要相互通信，那么要知道容器的网络类型有4种</p>
<ol>
<li>host</li>
<li>none</li>
<li>bridge</li>
<li>container<br>
要使不同节点的容器互通，就要使用iptables规则做转换或者使用overlay方式，如kubernetes中CNI。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ARTS-第十五周]]></title>
        <id>https://waterjiao.github.io/post/arts-di-shi-wu-zhou/</id>
        <link href="https://waterjiao.github.io/post/arts-di-shi-wu-zhou/">
        </link>
        <updated>2020-01-18T13:18:01.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="arts">ARTS</h2>
<h3 id="algorithm">Algorithm</h3>
<h4 id="只出现一次的数字只出现一次的数字">只出现一次的数字（<a href="https://leetcode-cn.com/problems/single-number/">只出现一次的数字</a>）</h4>
<blockquote>
<p>只出现一次的数字。题目难度为 Easy</p>
</blockquote>
<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<p><strong>示例1</strong></p>
<pre><code>输入: [2,2,1]
输出: 1

输入: [4,1,2,1,2]
输出: 4
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h2 id="arts">ARTS</h2>
<h3 id="algorithm">Algorithm</h3>
<h4 id="只出现一次的数字只出现一次的数字">只出现一次的数字（<a href="https://leetcode-cn.com/problems/single-number/">只出现一次的数字</a>）</h4>
<blockquote>
<p>只出现一次的数字。题目难度为 Easy</p>
</blockquote>
<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<p><strong>示例1</strong></p>
<pre><code>输入: [2,2,1]
输出: 1

输入: [4,1,2,1,2]
输出: 4
</code></pre>
<!-- more -->
<p>思路1：将数组排序，每隔两个进行遍历，找出不一样的数字即可</p>
<pre><code class="language-go">import &quot;sort&quot;
func singleNumber(nums []int) int {
    sort.Ints(nums)
    var a = nums[0]
    for i:=0;i&lt;len(nums)-1;i+=2{
        if nums[i] != nums[i+1]{
            a = nums[i]
            return a
        }
    }
    if len(nums)%2 != 0 {
        b := len(nums)
        a = nums[b-1]
    }
    return a
}
</code></pre>
<h3 id="review">Review</h3>
<blockquote>
<p>go</p>
</blockquote>
<p><a href="https://www.freecodecamp.org/news/learning-go-from-zero-to-hero-d2a3223b3d86/">Learning go from zero to hero</a><br>
从Packages开始：<br>
Go的代码都写在Package中，main包是整个程序执行的关键，在Go中有很多内建的包。最常使用的就是fmt包。</p>
<h4 id="installing-a-package">Installing a package</h4>
<pre><code>go get &lt;package-url-github&gt;
// example
go get github.com/satori/go.uuid
</code></pre>
<p>要安装的包要放在在工作目录的GOPATH中，安装好的包在GPOPATH/pkg中。</p>
<h4 id="panic">Panic</h4>
<p>Panic is something that is unhandled and is suddenly encountered during a program execution.<br>
例如当多线程对一个map进行读写时，会引起panic。当发生panic时，程序将会被挂起，能在panic后执行的只有defer。</p>
<pre><code>//Go
package main

import &quot;fmt&quot;

func main() {
    f()
    fmt.Println(&quot;Returned normally from f.&quot;)
}

func f() {
    defer func() {
        if r := recover(); r != nil {
            fmt.Println(&quot;Recovered in f&quot;, r)
        }
    }()
    fmt.Println(&quot;Calling g.&quot;)
    g(0)
    fmt.Println(&quot;Returned normally from g.&quot;)
}

func g(i int) {
    if i &gt; 3 {
        fmt.Println(&quot;Panicking!&quot;)
        panic(fmt.Sprintf(&quot;%v&quot;, i))
    }
    defer fmt.Println(&quot;Defer in g&quot;, i)
    fmt.Println(&quot;Printing in g&quot;, i)
    g(i + 1)
}
</code></pre>
<h4 id="defer">Defer</h4>
<p>Defer is something that will always get executed at the end of a function.<br>
Defer的作用在于，当我们想在方法结束之前执行一些动作，可以用defer，例如：关闭一个文件。</p>
<h3 id="tip">Tip</h3>
<h4 id="ipv6">IPv6</h4>
<blockquote>
<p>本周主要是网络IPv6和UML的学习<br>
Don’t communicate by sharing memory; share memory by communicating.</p>
</blockquote>
<ol>
<li></li>
</ol>
<h3 id="share">Share</h3>
<blockquote>
<p>go语言并发</p>
</blockquote>
<p>《Go语言实战》读书笔记，直接看飞雪无情的博客<a href="https://www.flysnow.org/2017/04/29/go-in-action-go-runner.html">Go并发示例</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ARTS-第十四周]]></title>
        <id>https://waterjiao.github.io/post/arts-di-14-zhou/</id>
        <link href="https://waterjiao.github.io/post/arts-di-14-zhou/">
        </link>
        <updated>2020-01-12T13:38:02.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="arts">ARTS</h2>
<h3 id="algorithm">Algorithm</h3>
<h4 id="删除字符串中的所有相邻重复项删除字符串中的所有相邻重复项">删除字符串中的所有相邻重复项（<a href="https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string">删除字符串中的所有相邻重复项</a>）</h4>
<blockquote>
<p>删除字符串中的所有相邻重复项。题目难度为 Easy</p>
</blockquote>
<p>给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。</p>
<p>在 S 上反复执行重复项删除操作，直到无法继续删除。</p>
<p>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p>
<p><strong>示例1</strong></p>
<pre><code>输入：&quot;abbaca&quot;
输出：&quot;ca&quot;
解释：
例如，在 &quot;abbaca&quot; 中，我们可以删除 &quot;bb&quot; 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 &quot;aaca&quot;，其中又只有 &quot;aa&quot; 可以执行重复项删除操作，所以最后的字符串为 &quot;ca&quot;。
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h2 id="arts">ARTS</h2>
<h3 id="algorithm">Algorithm</h3>
<h4 id="删除字符串中的所有相邻重复项删除字符串中的所有相邻重复项">删除字符串中的所有相邻重复项（<a href="https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string">删除字符串中的所有相邻重复项</a>）</h4>
<blockquote>
<p>删除字符串中的所有相邻重复项。题目难度为 Easy</p>
</blockquote>
<p>给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。</p>
<p>在 S 上反复执行重复项删除操作，直到无法继续删除。</p>
<p>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p>
<p><strong>示例1</strong></p>
<pre><code>输入：&quot;abbaca&quot;
输出：&quot;ca&quot;
解释：
例如，在 &quot;abbaca&quot; 中，我们可以删除 &quot;bb&quot; 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 &quot;aaca&quot;，其中又只有 &quot;aa&quot; 可以执行重复项删除操作，所以最后的字符串为 &quot;ca&quot;。
</code></pre>
<!-- more -->
<p>思路1：</p>
<pre><code class="language-go">func removeDuplicates(S string) string {
	stack := make([]rune, 0, len(S))
	for _, c := range S {
		b := false
		for len(stack) &gt; 0 &amp;&amp; stack[len(stack)-1] == c {
			stack = stack[:len(stack)-1]
			b = true
		}
		if !b {
			stack = append(stack, c)
		}

	}
	return string(stack)
}
</code></pre>
<h3 id="review">Review</h3>
<blockquote>
<p>暂无，待补充，本周坚持每天学习15个英文单词</p>
</blockquote>
<h3 id="tip">Tip</h3>
<h4 id="golang">Golang</h4>
<blockquote>
<p>本周主要是Golang的学习<br>
Don’t communicate by sharing memory; share memory by communicating.</p>
</blockquote>
<ol>
<li>Go 语言字典的键类型不可以是函数类型、字典类型和切片类型。<br>
Go 语言规范规定，在键类型的值之间必须可以施加操作符==和!=。换句话说，键类型的值必须要支持判等操作。由于函数类型、字典类型和切片类型的值并不支持判等操作，所以字典的键类型不能是这些类型。<br>
如果键的类型是数组类型，那么还要确保该类型的元素类型不是函数类型、字典类型或切片类型。<br>
求哈希和判等操作的速度越快，对应的类型就越适合作为键类型。</li>
<li>除了添加键 - 元素对，我们在一个值为nil的字典上做任何操作都不会引起错误。当我们试图在一个值为nil的字典中添加键 - 元素对的时候，Go 语言的运行时系统就会立即抛出一个 panic。</li>
<li>通道channel<br>
对于同一个通道，发送操作之间是互斥的，接收操作之间也是互斥的。<br>
发送操作和接收操作中对元素值的处理都是不可分割的。<br>
发送操作在完全完成之前会被阻塞。接收操作也是如此。<br>
对于值为nil的通道，不论它的具体类型是什么，对它的发送操作和接收操作都会永久地处于阻塞状态。<br>
退出for - select 循环 https://stackoverflow.com/questions/25469682/break-out-of-select-loop</li>
<li>Go 语言中根本没有继承的概念，它所做的是通过嵌入字段的方式实现了类型之间的组合。(设计模式中多用组合，少用继承，需要回顾下组合模式)</li>
<li>空结构体的指针类型是什么？</li>
</ol>
<h3 id="share">Share</h3>
<blockquote>
<p>暂无，待补充</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fitness-2020]]></title>
        <id>https://waterjiao.github.io/post/fitness-2020/</id>
        <link href="https://waterjiao.github.io/post/fitness-2020/">
        </link>
        <updated>2020-01-02T14:53:19.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>1月，学习和健身<br>
|  星期一  | 星期二  |  星期三  |  星期四  |  星期五  |  星期六  | 星期日  |<br>
|  ----  | ----  | ----  | ----  | ----  | ----  | ----  |<br>
|||1(生病)|2(生病)|3(生病)|4(生病)|5(生病)|<br>
|6(生病)|7(生病)|8(生病)|9(生病)|10(生病)|11(年会)|12(生病)|<br>
|13(胸)|14(胸)|15(被耽误)|16(加班)|17(加班)|18(休息)|19()|<br>
| 20   |21   |22   |23   |24   |25   |26   |27   |<br>
| 28   |29   |30   |31   |   |   |   |   |</p>
</blockquote>
<blockquote>
<p>2月，学习、读书和健身<br>
|  星期一  | 星期二  |  星期三  |  星期四  |  星期五  |  星期六  | 星期日  |<br>
|  ----  | ----  | ----  | ----  | ----  | ----  | ----  |<br>
|    |   |   |   |   |1(dance)|2(恢复)|<br>
|  3(dance)  |  4(休息) | 5(dance)  | 6(休息)  |  7(休息) |  8(休息) |  9(休息) |<br>
|    |   |   |   |   |   |   |   |</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ARTS-第十三周]]></title>
        <id>https://waterjiao.github.io/post/arts-di-13-zhou/</id>
        <link href="https://waterjiao.github.io/post/arts-di-13-zhou/">
        </link>
        <updated>2019-12-29T12:41:43.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="arts">ARTS</h2>
<h3 id="algorithm">Algorithm</h3>
<h4 id="买卖股票的最佳时机买卖股票的最佳时机">买卖股票的最佳时机（<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock">买卖股票的最佳时机</a>）</h4>
<blockquote>
<p>买卖股票的最佳时机。题目难度为 Easy</p>
</blockquote>
<p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p>
<p>注意你不能在买入股票前卖出股票。</p>
<p><strong>示例1</strong></p>
<pre><code>输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
</code></pre>
<p><strong>示例2</strong></p>
<pre><code>输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h2 id="arts">ARTS</h2>
<h3 id="algorithm">Algorithm</h3>
<h4 id="买卖股票的最佳时机买卖股票的最佳时机">买卖股票的最佳时机（<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock">买卖股票的最佳时机</a>）</h4>
<blockquote>
<p>买卖股票的最佳时机。题目难度为 Easy</p>
</blockquote>
<p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p>
<p>注意你不能在买入股票前卖出股票。</p>
<p><strong>示例1</strong></p>
<pre><code>输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
</code></pre>
<p><strong>示例2</strong></p>
<pre><code>输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
</code></pre>
<!-- more -->
<p>思路1：卖出价格要大于买入价格，循环遍历数组，当前遍历值是买入价格，在买入价格之后才可以是卖出价格，再次循环遍历之后的数组，计算差值，就是利润值。</p>
<pre><code>class Solution {
    public int maxProfit(int[] prices) {
        if(prices==null||prices.length==0) return 0;
        int max = 0;
        for(int i=0;i&lt;prices.length;i++){
            int min = prices[i];
            for(int j=i+1;j&lt;prices.length;j++){
                if(max&lt;prices[j]-prices[i]){
                    max = prices[j]-prices[i];
                }
            }
        }
        return max;
    }
}
</code></pre>
<p>思路2：题意是给出一个数组代表每天的股票金额，让你在最多买卖一次的情况下算出最大的收益额，最简单的就是模拟即可，每次记录当前值减去最小值的差值，与上一次的进行比较然后更新最大值即可。</p>
<pre><code>class Solution {
    public int maxProfit(int[] prices) {
        int max = 0, minPrice = Integer.MAX_VALUE;
        for (int i = 0; i &lt; prices.length; ++i) {
            if (prices[i] &lt; minPrice) minPrice = prices[i];
            int delta = prices[i] - minPrice;
            if (delta &gt; max) max = delta;
        }
        return max;
    }
}
</code></pre>
<h3 id="review">Review</h3>
<blockquote>
<p>暂无，待补充</p>
</blockquote>
<h3 id="tip">Tip</h3>
<h4 id="docker">Docker</h4>
<blockquote>
<p>本周主要是Docker的学习</p>
</blockquote>
<p>一、</p>
<ol>
<li>创建型模式：工厂模式、单例模式</li>
<li></li>
</ol>
<h3 id="share">Share</h3>
<p>分享一篇关于通过源码一步一步分析ArrayList 扩容机制有关的文章<a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/collection/ArrayList-Grow.md">通过源码一步一步分析ArrayList 扩容机制</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ARTS-第十二周]]></title>
        <id>https://waterjiao.github.io/post/arts-di-shi-er-zhou/</id>
        <link href="https://waterjiao.github.io/post/arts-di-shi-er-zhou/">
        </link>
        <updated>2019-12-09T14:22:03.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="arts">ARTS</h2>
<h3 id="algorithm">Algorithm</h3>
<h4 id="买卖股票的最佳时机买卖股票的最佳时机">买卖股票的最佳时机（<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock">买卖股票的最佳时机</a>）</h4>
<blockquote>
<p>买卖股票的最佳时机。题目难度为 Easy</p>
</blockquote>
<p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p>
<p>注意你不能在买入股票前卖出股票。</p>
<p><strong>示例1</strong></p>
<pre><code>输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
</code></pre>
<p><strong>示例2</strong></p>
<pre><code>输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h2 id="arts">ARTS</h2>
<h3 id="algorithm">Algorithm</h3>
<h4 id="买卖股票的最佳时机买卖股票的最佳时机">买卖股票的最佳时机（<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock">买卖股票的最佳时机</a>）</h4>
<blockquote>
<p>买卖股票的最佳时机。题目难度为 Easy</p>
</blockquote>
<p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p>
<p>注意你不能在买入股票前卖出股票。</p>
<p><strong>示例1</strong></p>
<pre><code>输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
</code></pre>
<p><strong>示例2</strong></p>
<pre><code>输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
</code></pre>
<!-- more -->
<p>思路1：卖出价格要大于买入价格，循环遍历数组，当前遍历值是买入价格，在买入价格之后才可以是卖出价格，再次循环遍历之后的数组，计算差值，就是利润值。</p>
<pre><code>class Solution {
    public int maxProfit(int[] prices) {
        if(prices==null||prices.length==0) return 0;
        int max = 0;
        for(int i=0;i&lt;prices.length;i++){
            int min = prices[i];
            for(int j=i+1;j&lt;prices.length;j++){
                if(max&lt;prices[j]-prices[i]){
                    max = prices[j]-prices[i];
                }
            }
        }
        return max;
    }
}
</code></pre>
<p>思路2：题意是给出一个数组代表每天的股票金额，让你在最多买卖一次的情况下算出最大的收益额，最简单的就是模拟即可，每次记录当前值减去最小值的差值，与上一次的进行比较然后更新最大值即可。</p>
<pre><code>class Solution {
    public int maxProfit(int[] prices) {
        int max = 0, minPrice = Integer.MAX_VALUE;
        for (int i = 0; i &lt; prices.length; ++i) {
            if (prices[i] &lt; minPrice) minPrice = prices[i];
            int delta = prices[i] - minPrice;
            if (delta &gt; max) max = delta;
        }
        return max;
    }
}
</code></pre>
<h3 id="review">Review</h3>
<blockquote>
<p>暂无，待补充</p>
</blockquote>
<h3 id="tip">Tip</h3>
<h4 id="docker">Docker</h4>
<blockquote>
<p>本周主要是Docker的学习</p>
</blockquote>
<p>一、</p>
<ol>
<li>创建型模式：工厂模式、单例模式</li>
<li></li>
</ol>
<h3 id="share">Share</h3>
<p>分享一篇关于通过源码一步一步分析ArrayList 扩容机制有关的文章<a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/collection/ArrayList-Grow.md">通过源码一步一步分析ArrayList 扩容机制</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ARTS-第十一周]]></title>
        <id>https://waterjiao.github.io/post/arts--di-shi-yi-zhou/</id>
        <link href="https://waterjiao.github.io/post/arts--di-shi-yi-zhou/">
        </link>
        <updated>2019-12-08T15:36:31.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="arts">ARTS</h2>
<h3 id="algorithm">Algorithm</h3>
<h4 id="买卖股票的最佳时机买卖股票的最佳时机">买卖股票的最佳时机（<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock">买卖股票的最佳时机</a>）</h4>
<blockquote>
<p>买卖股票的最佳时机。题目难度为 Easy</p>
</blockquote>
<p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p>
<p>注意你不能在买入股票前卖出股票。</p>
<p><strong>示例1</strong></p>
<pre><code>输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
</code></pre>
<p><strong>示例2</strong></p>
<pre><code>输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h2 id="arts">ARTS</h2>
<h3 id="algorithm">Algorithm</h3>
<h4 id="买卖股票的最佳时机买卖股票的最佳时机">买卖股票的最佳时机（<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock">买卖股票的最佳时机</a>）</h4>
<blockquote>
<p>买卖股票的最佳时机。题目难度为 Easy</p>
</blockquote>
<p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p>
<p>注意你不能在买入股票前卖出股票。</p>
<p><strong>示例1</strong></p>
<pre><code>输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
</code></pre>
<p><strong>示例2</strong></p>
<pre><code>输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
</code></pre>
<!-- more -->
<p>思路1：卖出价格要大于买入价格，循环遍历数组，当前遍历值是买入价格，在买入价格之后才可以是卖出价格，再次循环遍历之后的数组，计算差值，就是利润值。</p>
<pre><code>class Solution {
    public int maxProfit(int[] prices) {
        if(prices==null||prices.length==0) return 0;
        int max = 0;
        for(int i=0;i&lt;prices.length;i++){
            int min = prices[i];
            for(int j=i+1;j&lt;prices.length;j++){
                if(max&lt;prices[j]-prices[i]){
                    max = prices[j]-prices[i];
                }
            }
        }
        return max;
    }
}
</code></pre>
<p>思路2：题意是给出一个数组代表每天的股票金额，让你在最多买卖一次的情况下算出最大的收益额，最简单的就是模拟即可，每次记录当前值减去最小值的差值，与上一次的进行比较然后更新最大值即可。</p>
<pre><code>class Solution {
    public int maxProfit(int[] prices) {
        int max = 0, minPrice = Integer.MAX_VALUE;
        for (int i = 0; i &lt; prices.length; ++i) {
            if (prices[i] &lt; minPrice) minPrice = prices[i];
            int delta = prices[i] - minPrice;
            if (delta &gt; max) max = delta;
        }
        return max;
    }
}
</code></pre>
<h3 id="review">Review</h3>
<blockquote>
<p>暂无，待补充</p>
</blockquote>
<h3 id="tip">Tip</h3>
<h4 id="golang">Golang</h4>
<blockquote>
<p>本周主要是Go语言的学习</p>
</blockquote>
<p>一、基础</p>
<ol>
<li>变量<br>
通过var关键字来声明，在函数和方法中还可以使用简短声明</li>
</ol>
<pre><code>var name string

func getName() string{
	name:=&quot;xiaoLi&quot;
	return name
}
</code></pre>
<ol start="2">
<li>常量<br>
通过const关键字来声明</li>
</ol>
<pre><code>const a int = 0
const b int = iota   //0
           c                   //1
					 d                  //2
const	e int = 100
           f                   //4
</code></pre>
<ol start="3">
<li>字符串<br>
Go语言中字符串是用双引号包裹的！<br>
Go语言中字符是用单引号包裹的！</li>
</ol>
<h3 id="share">Share</h3>
<p>分享一篇关于通过源码一步一步分析ArrayList 扩容机制有关的文章<a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/collection/ArrayList-Grow.md">通过源码一步一步分析ArrayList 扩容机制</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据结构与算法-时间复杂度分析]]></title>
        <id>https://waterjiao.github.io/post/shu-ju-jie-gou-yu-suan-fa-shi-jian-fu-za-du-fen-xi/</id>
        <link href="https://waterjiao.github.io/post/shu-ju-jie-gou-yu-suan-fa-shi-jian-fu-za-du-fen-xi/">
        </link>
        <updated>2019-11-17T02:32:39.000Z</updated>
        <content type="html"><![CDATA[<p>最好情况时间复杂度（best case time complexity）、最坏情况时间复杂度（worst case time complexity）、平均情况时间复杂度（average case time complexity）、均摊时间复杂度（amortized time complexity）</p>
<pre><code>
// n表示数组array的长度
int find(int[] array, int n, int x) {
  int i = 0;
  int pos = -1;
  for (; i &lt; n; ++i) {
    if (array[i] == x) pos = i;
  }
  return pos;
}
</code></pre>
<p>find函数用于查找array数组中是否含有x数字，如果含有输出x的下标，如果没找到，返回-1。这段代码的时间复杂度为O(n)，用大O来表示时间复杂度，大O中的n是指比较的次数，它的最好和最坏情况时间复杂度都是O(n)，把这段代码稍微改一下.</p>
<pre><code>
// n表示数组array的长度
int find(int[] array, int n, int x) {
  int i = 0;
  int pos = -1;
  for (; i &lt; n; ++i) {
    if (array[i] == x){
			pos = i;
			break;
			}
  }
  return pos;
}
</code></pre>
<p>更改后的代码，它的最好和最坏情况时间复杂度就不同了，原因在于，一旦遍历到数值等于x，循环就结束了，最好情况就是x在数组的头一个，时间复杂度为O(1)，最坏情况就是x不在数组中，时间复杂度为O(n)。</p>
<p>分析add函数的时间复杂度，最好，最坏，平均和均摊时间复杂度</p>
<pre><code>
// 全局变量，大小为10的数组array，长度len，下标i。
int array[] = new int[10]; 
int len = 10;
int i = 0;

// 往数组中添加一个元素
void add(int element) {
   if (i &gt;= len) { // 数组空间不够了
     // 重新申请一个2倍大小的数组空间
     int new_array[] = new int[len*2];
     // 把原来array数组中的数据依次copy到new_array
     for (int j = 0; j &lt; len; ++j) {
       new_array[j] = array[j];
     }
     // new_array复制给array，array现在大小就是2倍len了
     array = new_array;
     len = 2 * len;
   }
   // 将element放到下标为i的位置，下标i加一
   array[i] = element;
   ++i;
}
</code></pre>
]]></content>
    </entry>
</feed>